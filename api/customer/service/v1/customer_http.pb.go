// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CustomerHTTPServer interface {
	Consume(context.Context, *ConsumeRequest) (*ConsumeReply, error)
}

func RegisterCustomerHTTPServer(s *http.Server, srv CustomerHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/consume", _Customer_Consume0_HTTP_Handler(srv))
}

func _Customer_Consume0_HTTP_Handler(srv CustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConsumeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customer.service.v1.Customer/Consume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Consume(ctx, req.(*ConsumeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsumeReply)
		return ctx.Result(200, reply)
	}
}

type CustomerHTTPClient interface {
	Consume(ctx context.Context, req *ConsumeRequest, opts ...http.CallOption) (rsp *ConsumeReply, err error)
}

type CustomerHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerHTTPClient(client *http.Client) CustomerHTTPClient {
	return &CustomerHTTPClientImpl{client}
}

func (c *CustomerHTTPClientImpl) Consume(ctx context.Context, in *ConsumeRequest, opts ...http.CallOption) (*ConsumeReply, error) {
	var out ConsumeReply
	pattern := "/v1/consume"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/customer.service.v1.Customer/Consume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
